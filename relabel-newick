#!/bin/bash
#
#  relabel-newick - relabel nodes in a newick format file
#  Copyright (C) 2017  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: https://github.com/zwets/phylo-utils

# Globals

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to exit this script on parse error
parse_error() {
    err_exit "parse error${1:+: $1} at: ${TOK}${BUF}"
}

# Debug utility, uncomment out when needed
DEBUG() {
    #echo "DEBUG: ${1:+$1 }(TOK='$TOK')(BUF='$(expr substr "$BUF" 1 12)...')" >&2
    return 0
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename "$0") [OPTIONS] [FILE [RULES]]

  Read phylogenetic tree from Newick format FILE, apply the rewrite rules
  from file RULES to the node labels in the tree, and write the resulting
  tree to standard output.
  
  With option --extract do not apply rewrite rules, but instead extract
  all node labels from FILE, producing on standard output a list of
  default rules that can be used as the basis for a RULES file.
  
  When RULES is absent or '-', read rules from standard input.  When FILE
  is absent or '-', read tree from standard input.  With --extract, no
  RULES argument must be given.
  
  OPTIONS
   -x,--extract  extract to stdout a template rule for each node in FILE
   -v,--verbose  produce verbose output on stderr
   -h,--help     this help
  
  RULES must have lines of colon-separated values OLD:NEW.  OLD is an
  extended regex(7) whose anchored match with any label of the tree is
  changed to NEW.  By 'anchored' is meant that OLD is interpreted as ^OLD\$
  i.e. matched end-to-end against the label.  NEW may be any string not
  containing characters that Newick disallows (notably (),:;).  NEW may
  contain back-references \\1..\\9, as with the 's' command in sed(1).
  
  For EXAMPLES, see sample.rules in the test directory that comes with
  the source (https://github.com/zwets/phylo-utils).
  "
    exit ${1:-1}
}

# Newick tree parser

# - Newick BNF syntax (condensed from the overblown Wikipedia entry)
#   Tree   ::= Branch ';'
#   Branch ::= ['('Branch [','Branch ...]')'] [name] [':'length]

# Holds the current state of the parser
TOK=""
BUF=""

# Set the global sed options, taking into account platform differences
SED_OPT="-Ee"
sed -E --version >/dev/null 2>&1 || SED_OPT="-re"

# Tokeniser - tokens are the five characters ( ) , : , or a sequence of anything else
next_Token() {
    local C="$(echo "$BUF" | sed $SED_OPT 's/^ *(.?).*$/\1/')"
    case "$C" in
    '') TOK=''
        BUF=''
        ;;
    '('|','|')'|':'|';')
        TOK="$C"
        BUF="$(echo "$BUF" | sed $SED_OPT 's/^ *.(.*)$/\1/')"
        ;;
    "'")
        TOK="$(echo "$BUF" | sed $SED_OPT "s/^ *('[^']+').*\$/\1/")"
        BUF="$(echo "$BUF" | sed $SED_OPT "s/^ *'[^']+'(.*)\$/\1/")"
        ;;
    *)
        TOK="$(echo "$BUF" | sed $SED_OPT 's/^ *([^(,):;]+)[(,):;]?.*$/\1/')"
        BUF="$(echo "$BUF" | sed $SED_OPT 's/^ *[^(,):;]+(.*)$/\1/')"
        ;;
    esac
    true
}

# Try and parse next token, which must equal "$1", or when $1 is "regex" must match "$2".
try_parse() {
    [ $# -eq 2 ] && [ "$1" = "regex" ] && [ -n "$2" ] || [ -n "$1" ] || err_exit "PROGRAMMER ERROR"
    [ $# -eq 2 ] && echo "$TOK" | grep -Eq "$2" || [ "$TOK" = "$1" ] || return 1
    [ $EXTRACT ] || printf "$TOK"
    next_Token
}

parse_Tree() {
    parse_Branch
    parse_Char ';'
}

parse_Branch() {
    opt_parse_List
    opt_parse_Name
    opt_parse_Length
}

opt_parse_List() {
    try_parse '(' && parse_Branch && opt_parse_Branches && parse_Char ')' ||
    true
}

opt_parse_Branches() {
    try_parse ',' && parse_Branch && opt_parse_Branches ||
    true
}

opt_parse_Name() { # Note requires REWRITE_CMD to have the s:OLD:NEW: rules
    if echo "$TOK" | grep -q '^[^(,):;]'; then
        local OUT="$(printf "$TOK" | sed $SED_OPT "$REWRITE_CMD")"
        echo ${EXTRACT:--n} "$OUT"
        next_Token
    fi
    true
}

opt_parse_Length() {
    try_parse ':' && parse_Length ||
    true
}

parse_Length() {
    try_parse regex '^([0-9]+(\.[0-9]+)?([eE]-?[0-9]+)?)$' || parse_error "expected number"
}

parse_Char() {
    try_parse "$1" || parse_error "expecting '$1'"
}

# Rewrite the multiline string on stdin to a sed program on stdout
rules_to_sed() {
    while read -r LINE; do
        # Ignore empty lines 
        [ -n "$(echo "$LINE" | tr -d ' ')" ] || continue
        # Ignore comment lines
        echo "$LINE" | grep -Eq '^ *#' && continue
        [ "$(echo "$LINE" | tr -cd ':')" = ":" ] || err_exit "line must contain exactly one colon character: $LINE"
        echo -n "s:^${LINE%%:*}\$:${LINE#*:}:;"
    done
}

# Main

# Parse options
unset VERBOSE EXTRACT
while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    -x|--extract) EXTRACT=1 ;;
    -v|--verbose) VERBOSE=1 ;;
    -h|--help) usage_exit 0 ;;
    *) usage_exit ;;
    esac
    shift
done

# Parse and check arguments
[ $EXTRACT ] && [ $# -le 1 ] || [ $# -le 2 ] || usage_exit
FILE1="${1:--}"
FILE2="${2:--}"
[ "$FILE1" != "-" ] || FILE1="/dev/stdin"
[ "$FILE2" != "-" ] || FILE2="/dev/stdin"
[ -r "$FILE1" ] || err_exit "cannot read file: $FILE1"
[ $EXTRACT ] || [ -r "$FILE2" ] || err_exit "cannot read file: $FILE2"

# Check that echo preserves backslash sequences; the one in bash should
[ "$(echo '\1')" = '\1' ] || err_exit "unexpected 'echo' behaviour, please report at https://github.com/zwets/phylo-utils/issues/new"

# Read the input, handling the case where both are read from same file (stdin),
# noting that Newick ends at the first ';', so we splice it there.
if [ -z "$EXTRACT" -a "$FILE1" = "$FILE2" ]; then
    ALL_INPUT="$(cat "$FILE1")"
    BUF="${ALL_INPUT%%;*};"
    RULES="${ALL_INPUT#;}"
    unset ALL_INPUT
else
    BUF="$(cat "$FILE1")"
    [ $EXTRACT ] || RULES="$(cat "$FILE2")"
fi

# Create the rewrite command that will be used by sed to convert OLD to NEW labels
if [ $EXTRACT ]; then
    # When extracting, each node label "N" is rewritten to identity rule "N:N"
    REWRITE_CMD='s/(.*)/\1:\1/'
else
    # Otherwise use the rules_to_sed function to convert the OLD:NEW rules to sed
    REWRITE_CMD="$(echo "$RULES" | rules_to_sed)" || exit 1
fi

# Do the actual work
next_Token
parse_Tree | ([ $EXTRACT ] && sort -u || cat)
echo

# vim: sts=4:sw=4:et:ai:si
